name: Build ESP8266 Sketch

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]   # пуш тега -> релиз
  pull_request:
    branches: [ main ]

permissions:
  contents: write   # нужно для создания Release

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Cache Arduino CLI
        id: cache-arduino-cli
        uses: actions/cache@v3
        with:
          path: ./bin
          key: arduino-cli-Linux-v1.3.1

      - name: Install Arduino CLI
        if: steps.cache-arduino-cli.outputs.cache-hit != 'true'
        run: |
          curl -fsSL https://downloads.arduino.cc/arduino-cli/arduino-cli_1.3.1_Linux_64bit.tar.gz | tar xz
          mkdir -p ~/.arduino15

      - name: Cache ESP8266 platform
        id: cache-esp8266-core
        uses: actions/cache@v3
        with:
          path: ~/.arduino15/packages/esp8266
          key: esp8266-core-Linux-v3.1.2

      - name: Install ESP8266 core
        if: steps.cache-esp8266-core.outputs.cache-hit != 'true'
        run: |
          ./bin/arduino-cli config init --additional-urls http://arduino.esp8266.com/stable/package_esp8266com_index.json
          ./bin/arduino-cli core update-index
          ./bin/arduino-cli core install esp8266:esp8266@3.1.2

      - name: Cache Arduino libraries
        uses: actions/cache@v3
        with:
          path: ~/.arduino15/libraries
          key: arduino-libraries-${{ hashFiles('**/*.ino', '**/library.properties') }}

      - name: Install project libraries
        run: |
          if [ -d ./libraries ]; then
            mkdir -p ~/Arduino/libraries
            cp -r ./libraries/* ~/Arduino/libraries/
          fi

      - name: Clean build folder
        run: |
          rm -rf ./build/esp8266
          mkdir -p ./build/esp8266

      - name: Compile Blink sketch
        run: |
          ./bin/arduino-cli compile \
            --fqbn esp8266:esp8266:nodemcuv2 \
            --build-path ./build/esp8266 \
            ./Blink

      # Дополнительно конвертируем ELF -> HEX (objcopy)
      - name: Generate HEX file
        run: |
          if ls ./build/esp8266/*.elf 1> /dev/null 2>&1; then
            for f in ./build/esp8266/*.elf; do
              arm-none-eabi-objcopy -O ihex "$f" "${f%.elf}.hex" || true
            done
          fi

      # Загружаем полный билд в артефакты
      - name: Upload build folder
        uses: actions/upload-artifact@v4
        with:
          name: esp8266-build
          path: ./build/esp8266

      # Если пуш тега -> делаем релиз и прикрепляем bin/elf/map/hex/zip
      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ./build/esp8266/*.bin
            ./build/esp8266/*.elf
            ./build/esp8266/*.map
            ./build/esp8266/*.hex
            ./build/esp8266.zip

      # Запаковываем всю папку build в zip для Release
      - name: Zip build folder
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          cd ./build
          zip -r esp8266.zip esp8266
