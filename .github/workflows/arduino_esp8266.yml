name: Build ESP8266 Sketch

on:
  push:
    tags: ['v*']
permissions:
  contents: write  # нужно для создания/обновления релиза

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout репозитория
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Кэш Arduino CLI
      - name: Cache Arduino CLI
        id: cache-arduino-cli
        uses: actions/cache@v3
        with:
          path: ./bin
          key: arduino-cli-Linux-v1.3.1

      # 3. Установка Arduino CLI
      - name: Setup Arduino CLI
        uses: arduino/setup-arduino-cli@v2.0.0
        with:
         version: 1.3.1
      
      - name: Check Arduino CLI
        run: arduino-cli version
         
      # 4. Кэш ESP8266 core
      - name: Cache ESP8266 platform
        id: cache-esp8266-core
        uses: actions/cache@v3
        with:
          path: ~/.arduino15/packages/esp8266
          key: esp8266-core-Linux-v3.1.2

      # 5. Установка ESP8266 core
      - name: Install ESP8266 core        
        run: |
          ./bin/arduino-cli config init --additional-urls http://arduino.esp8266.com/stable/package_esp8266com_index.json
          ./bin/arduino-cli core update-index
          ./bin/arduino-cli core install esp8266:esp8266@3.1.2

      # 6. Кэш библиотек Arduino
      - name: Cache Arduino libraries
        uses: actions/cache@v3
        with:
          path: ~/Arduino/libraries
          key: arduino-libraries-${{ hashFiles('**/*.ino', '**/library.properties') }}

      # 7. Установка локальных библиотек проекта
      - name: Install project libraries
        run: |
          mkdir -p ~/Arduino/libraries
          if [ -d ./libraries ]; then
            cp -r ./libraries/* ~/Arduino/libraries/
          fi

      # 8. Очистка папки build
      - name: Clean build folder
        run: |
          rm -rf ./build
          mkdir -p ./build/esp8266

      - name: Install binutils-arm-none-eabi
        run: sudo apt-get update && sudo apt-get install -y binutils-arm-none-eabi

      # 9. Компиляция скетча Blink
      - name: Compile Blink sketch
        run: |
            ./bin/arduino-cli compile \
            --fqbn esp8266:esp8266:nodemcuv2 \
            --build-path ./build/esp8266 \
            ./Blink \
            --output-dir ./build/esp8266 \
            --verbose

      # 10. Генерация HEX из ELF
      - name: Convert ELF to HEX
        run: |
           xtensa-lx106-elf-objcopy -O ihex ./build/esp8266/Blink.ino.elf ./build/esp8266/Blink.ino.hex

      # 11. Проверка файлов
      - name: List build files
        run: |
            echo "Files to be included in release:"
            ls -la ./build/esp8266/*.bin
            ls -la ./build/esp8266/*.elf
            ls -la ./build/esp8266/*.map
            ls -la ./build/esp8266/*.hex        

      # 11. Создание zip архива build (для релиза)
      - name: Zip build folder
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          cd ./build
          zip -r esp8266-build.zip esp8266

      # 12. Проверка существования файлов для релиза
      - name: Check release files exist
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo "Files to be included in release:"
          ls -la ./build/esp8266/*.bin
          ls -la ./build/esp8266/*.elf
          ls -la ./build/esp8266/*.map
          ls -la ./build/esp8266/*.hex
          ls -la ./build/esp8266-build.zip

      # 13. Создание или обновление Release
      - name: Create or Update Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          files: |
            ./build/esp8266/*.bin
            ./build/esp8266/*.elf
            ./build/esp8266/*.map
            ./build/esp8266/*.hex
            ./build/esp8266-build.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
